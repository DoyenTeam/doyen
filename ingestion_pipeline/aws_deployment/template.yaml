---
AWSTemplateFormatVersion: '2010-09-09'

# Define parameters that will be passed in when the stack is created.
# Each parameter is assigned using the --parameters flag when the stack is
# created, using the format ParameterKey=ParameterValue. So for example,
# to create a stack with the MyHomeIp parameter set to 123.4.5.6/32 (note the
# cidr block), and manually set the AMI you would run:
#  aws cloudformation create-stack --stack-name DoyenStack \
#    --template-body file://template.yaml \
#    --parameters ParameterKey=MyHomeIp,ParameterValue=123.4.5.6/32 \
#                 ParameterKey=AmazonLinux2Ami,ParameterValue=ami-12345678
Parameters:
  MyHomeIp:
    Type: String
  MyKeyPairName:
    Type: String
  AmazonLinux2Ami:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

# Define resources that will be created when the stack is created.
Resources:
  # First we have to create the network infrastructure, including the VPC,
  # subnets, and routing tables. This config creates a public and a private
  # subnet, and adds an internet gateway on the public subnet, which is what
  # allows instances in the public subnet access to and from the internet.
  DoyenVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: '10.0.0.0/16'
  DoyenInternetGateway:
    Type: AWS::EC2::InternetGateway
  DoyenVPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref DoyenVPC
      InternetGatewayId: !Ref DoyenInternetGateway
  DoyenPrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref DoyenVPC
      CidrBlock: '10.0.0.0/24'
  DoyenPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref DoyenVPC
      CidrBlock: '10.0.1.0/24'
      MapPublicIpOnLaunch: 'true'
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref DoyenVPC
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: DoyenInternetGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref DoyenInternetGateway
  DoyenPublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref DoyenPublicSubnet
      RouteTableId: !Ref PublicRouteTable

  # Define a security group that allows SSH access from
  # my home IP, as well as Elasticsearch access from anywhere,
  # and ensures all outbound traffic is allowed.
  DoyenSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: DoyenSecurityGroup
      GroupDescription: Allow SSH access from my home IP, as well as Elasticsearch access from anywhere.
      VpcId: !Ref DoyenVPC
      SecurityGroupIngress:
        # Allow SSH access from my home IP
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref MyHomeIp
        # Allow Elasticsearch access from anywhere
        - IpProtocol: tcp
          FromPort: 9200
          ToPort: 9200
          CidrIp: '0.0.0.0/0'
      SecurityGroupEgress:
        # Allow all outbound traffic
        - CidrIp: '0.0.0.0/0'
          Description: 'allow all outbound traffic'
          IpProtocol: '-1'

  # Define an EC2 instance that will run Elasticsearch.
  # Note that the instance is set to be r6a.large (2 vCPU, 16 GB RAM) to
  # accommodate loading the data into Elasticsearch. In steady state, the
  # instance can be smaller, such as an m6a.large (2 vCPU, 8 GB RAM) or even
  # a t3.medium (2 vCPU, 4 GB RAM).
  DoyenESInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AmazonLinux2Ami
      InstanceType: r6a.large
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          GroupSet:
            - !Ref DoyenSecurityGroup
          SubnetId: !Ref DoyenPublicSubnet
      KeyName: !Ref MyKeyPairName
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 100
            VolumeType: gp2
